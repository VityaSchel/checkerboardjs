export default function drawPattern(e,i){try{if(void 0!==i&&"object"!=typeof i)throw{message:"Options is not an object",libwarn:!0};if(!HTMLCanvasElement)throw{message:"HTMLCanvasElement instance not found",libwarn:!0};if(!e)throw{message:"Canvas not found",libwarn:!0};if(!(e instanceof HTMLCanvasElement))throw{message:"canvas is not an instance of HTMLCanvasElement",libwarn:!0};if(i&&i.size&&"number"!=typeof i?.size)throw{message:"options.size is not a number",libwarn:!0};(i=i||{}).size=i?.size||10,i.primaryColor=i?.primaryColor||"#EDEDED",i.secondaryColor=i?.secondaryColor||"#C6C6C6";const n=e.getContext("2d"),t=Math.ceil(e.width/i.size),o=Math.ceil(e.height/i.size);for(let s=0;s<o;s++)for(let a=0;a<t;a++){let r=a*i.size,l=s*i.size;if(i.centered){let n=t*i.size-e.width,s=o*i.size-e.height;r-=n/2,l-=s/2}n.fillStyle=a%2==s%2?i.primaryColor:i.secondaryColor,n.fillRect(r,l,i.size,i.size)}}catch(e){throw e.libwarn&&!i?.ignoreWarnings?`${e.message}, pass ignoreWarnings: true in options to ignore this warning`:e}}